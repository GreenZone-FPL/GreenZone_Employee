import {io} from 'socket.io-client';
import {AppAsyncStorage} from '../utils';
import mitt from 'mitt';

class ShipperSocketService {
  constructor() {
    this.socket = null;
    this.emitter = mitt(); // Táº¡o emitter Ä‘á»ƒ phÃ¡t sá»± kiá»‡n
  }

  async initialize() {
    if (!this.socket) {
      try {
        const token = await AppAsyncStorage.readData(
          AppAsyncStorage.STORAGE_KEYS.accessToken,
        );
        const storeId = await AppAsyncStorage.readData('storeId');
        console.log('Token:', token);
        console.log('storeId:', storeId);

        if (!token || !storeId) {
          console.log(
            'KhÃ´ng tÃ¬m tháº¥y token hoáº·c storeId, khÃ´ng thá»ƒ káº¿t ná»‘i socket!',
          );
          return;
        }

        this.socket = io('https://greenzone.motcaiweb.io.vn', {
          path: '/socket.io/',
          transports: ['websocket'],
          auth: {token},
        });

        // Láº¯ng nghe khi socket káº¿t ná»‘i thÃ nh cÃ´ng
        this.socket.on('connect', () => {
          console.log('Shipper connected', this.socket.id);
          this.socket.emit('store.join', storeId);
          console.log(`Shipper joined store room: ${storeId}`);
        });

        this.socket.on('order.updateStatus', data => {
          console.log(
            'ðŸ“¦ Nháº­n Ä‘Æ°á»£c order.updateStatus:',
            JSON.stringify(data, null, 2),
          );

          if (data.status === 'readyForPickup') {
            console.log(
              `ðŸš€ Shipper tham gia room vá»›i orderId: ${data.orderId}`,
            );
            this.socket.emit('order.join', data.orderId);
          }
        });


        // Láº¯ng nghe khi socket bá»‹ ngáº¯t káº¿t ná»‘i
        this.socket.on('disconnect', () => {
          console.log(' Disconnected');
        });

        // Báº¯t lá»—i khi káº¿t ná»‘i tháº¥t báº¡i
        this.socket.on('connect_error', error => {
          console.error('Lá»—i káº¿t ná»‘i:', error);
        });

        // Báº¯t táº¥t cáº£ sá»± kiá»‡n Ä‘á»ƒ debug
        this.socket.onAny((event, ...args) => {
          console.log(
            `Nháº­n Ä‘Æ°á»£c sá»± kiá»‡n: ${event}`,
            JSON.stringify(args, null, 2),
          );
        });
      } catch (error) {
        console.log('Lá»—i khi khá»Ÿi táº¡o socket:', error);
      }
    }
  }

  on(event, callback) {
    this.emitter.on(event, callback);
  }

  off(event, callback) {
    this.emitter.off(event, callback);
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      console.log('Socket Ä‘Ã£ ngáº¯t káº¿t ná»‘i');
    }
  }
}

// Xuáº¥t Ä‘á»‘i tÆ°á»£ng ShipperSocketService
export default new ShipperSocketService();
